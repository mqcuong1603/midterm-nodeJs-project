services:
  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=/api
    container_name: app-frontend
    ports:
      - "80:80"
    depends_on:
      - nginx
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=/api

  # NGINX load balancer
  nginx:
    image: nginx:alpine
    container_name: app-nginx
    ports:
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Backend service - configured for scaling
  backend:
    build: ./backend
    expose:
      - "3000"
    depends_on:
      - db
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure

  # Task processor service for async operations
  task-processor:
    build: ./task-processor
    container_name: app-task-processor
    depends_on:
      - rabbitmq
      - db
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
    env_file:
      - .env
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./task-processor:/usr/src/app
      - /usr/src/app/node_modules

  # RabbitMQ message broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: app-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  db:
    image: mongo:latest
    container_name: app-db
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  rabbitmq_data:
